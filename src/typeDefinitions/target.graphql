type Target {
  id: String!
  firstName: String!
  lastName: String!
  email: String
  address: String
  city: String
  state: String
  zip5: String
  phone: String
  twitterHandle: String
  facebookProfile: String
  householdSize: Int
  tibs: [TibApplication]!
  createdAt: GraphQLDateTime!
  updatedAt: GraphQLDateTime!
  active: Boolean!
}

input CreateTargetInput {
  firstName: String!
  lastName: String!
  email: String
  address: String
  city: String
  state: String
  zip5: String
  phone: String
  twitterHandle: String
  facebookProfile: String
  householdSize: Int
  activeTibs: [String!]
  teamId: String!
}

type CreateTargetResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: Target
}

input UpdateTargetInput {
  firstName: String
  lastName: String
  email: String
  address: String
  city: String
  state: String
  zip5: String
  phone: String
  twitterHandle: String
  facebookProfile: String
  householdSize: Int
  activeTibs: [String!]
}

type UpdateTargetResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: Target
}

input TargetsInput {
  where: TargetsWhere
  limit: Int
  offset: Int
  sort: TargetsSort
}

input TargetsSort {
  id: SortDirection
  firstName: SortDirection
  lastName: SortDirection
  createdAt: SortDirection
  updatedAt: SortDirection
}

input TargetsWhere {
  OR: [TeamsWhere]
  AND: [TeamsWhere]
  id: StringWhere
  firstName: StringWhere
  lastName: StringWhere
  email: StringWhere
  address: StringWhere
  city: StringWhere
  state: StringWhere
  zip5: StringWhere
  phone: StringWhere
  twitterHandle: StringWhere
  facebookProfile: StringWhere
  createdAt: DateTimeWhere
  updatedAt: DateTimeWhere
  active: BooleanWhere
}

type TargetsResult {
  hasMore: Boolean!
  totalCount: Int!
  items: [Target]!
}

type RemoveTargetResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: Target
}
