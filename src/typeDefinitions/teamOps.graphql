type Team {
  id: ID!
  name: String!
  description: String
  active: Boolean
  userPermissions: [OLTeamPerms]
  userPermissionSummaryCounts: [OLTeamPermsSummary]
  slug: String!
  createdAt: GraphQLDateTime!
  updatedAt: GraphQLDateTime!
}

type RemoveTeamResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: User
}

input UpdateTeamInput {
  name: String
  description: String
}

type UpdateTeamResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: Team
}

input CreateTeamInput {
  name: String!
  description: String
}

type CreateTeamResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: Team
}

input TeamsInput {
  where: TeamsWhere
  limit: Int
  offset: Int
  sort: TeamsSort
}

input TeamsSort {
  id: SortDirection
  name: SortDirection
  createdAt: SortDirection
  updatedAt: SortDirection
}

input TeamsWhere {
  OR: [TeamsWhere]
  AND: [TeamsWhere]
  id: StringWhere
  name: StringWhere
  active: BooleanWhere
  slug: StringWhere
  teamPermissions: TeamPermissionsWhere
  createdAt: DateTimeWhere
  updatedAt: DateTimeWhere
}

type TeamsResult {
  hasMore: Boolean!
  totalCount: Int!
  items: [Team]!
}
