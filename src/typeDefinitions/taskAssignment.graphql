type TaskAssignment {
  id: String!
  definition: TaskDefinition!
  team: Team!
  active: Boolean!
  # calculated field
  available(targetId: String): TaskAssignmentAvailbillityStatus!
  # calculated field
  availableTo: [TaskAssignmentRoles]!
  complete(targetId: String): Boolean
  notAvailableBeforeTs: GraphQLDateTime
  notAvailableAfterTs: GraphQLDateTime
  notAvailableUntilCompletionOf: TaskAssignment
  sortValue: Int
  supplementalFields: [FormField]
}

type TaskAssignmentRoles {
  role: ObjectLevelPermissionEnum!
  available: Boolean!
}

type TaskAssignmentAvailbillityStatus {
  available: Boolean!
  nonAvailableCode: TaskNotAvailableEnum
}

enum TaskNotAvailableEnum {
  TOO_EARLY
  EXPIRED
  WRONG_PERMISSIONS
  DELETED
  NO_TARGET
  DEPENDENCY_NOT_MET
}

input CreateTaskAssignmentInput {
  teamId: String!
  taskDefinitionId: String!
  notAvailableBeforeTs: GraphQLDateTime
  notAvailableAfterTs: GraphQLDateTime
  taskRequiredRoles: [ObjectLevelPermissionEnum!]!
  # task assignment ID
  notUntilCompletionOf: String
  supplementalFields: [CreateFormFieldInput]
}

type CreateTaskAssignmentResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: TaskAssignment
}

input SetTaskAssignmentSortOrderInput {
  teamId: String!
  orderedTaskAssignmentIds: [String]!
}

type SetTaskAssignmentSortOrderResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: [TaskAssignment]!
}

input UpdateTaskAssignmentInput {
  taskAssignmentId: String!
  taskDefinitionId: String
  notAvailableBeforeTs: GraphQLDateTime
  notAvailableAfterTs: GraphQLDateTime
  taskRequiredRoles: [ObjectLevelPermissionEnum!]
  # task assignment ID
  notUntilCompletionOf: String
  supplementalFields: [CreateFormFieldInput]
}

type UpdateTaskAssignmentResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: TaskAssignment
}
