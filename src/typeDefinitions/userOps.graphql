type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  address: String!
  city: String!
  state: String!
  zip5: String!
  phone: String!
  active: Boolean
  globalPermissions: [GlobalPermissionsEnum]
  teamPermissions: [OLUserPerms]
  createdAt: GraphQLDateTime!
  updatedAt: GraphQLDateTime!
}

input UsersInput {
  where: UsersWhere
  limit: Int
  offset: Int
  sort: UserSort
}

input UsersWhere {
  OR: [UsersWhere]
  AND: [UsersWhere]
  id: StringWhere
  name: StringWhere
  email: StringWhere
  active: BooleanWhere
  createdAt: DateTimeWhere
  updatedAt: DateTimeWhere
}

input TeamPermissionsWhere {
  OR: [UsersWhere]
  AND: [UsersWhere]
  userId: StringWhere
  teamId: StringWhere
  permission: StringWhere
}

type RemoveUserResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: User
}

input UpdateUserInput {
  firstName: String
  lastName: String
  address: String
  city: String
  state: String
  zip5: String
  phone: String
  email: String
  active: Boolean
}

type UpdateUserResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: User
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  address: String!
  city: String!
  state: String!
  zip5: String!
  phone: String!
  email: String!
  active: Boolean
}

type CreateUserResult {
  code: MutationCodeEnum!
  success: Boolean!
  message: String!
  item: User
}

type UsersResults {
  hasMore: Boolean!
  totalCount: Int!
  items: [User]!
}

input UserSort {
  id: SortDirection
  firstName: SortDirection
  lastName: SortDirection
  address: SortDirection
  city: SortDirection
  state: SortDirection
  zip5: SortDirection
  phone: SortDirection
  email: SortDirection
  createdAt: SortDirection
  updatedAt: SortDirection
}
